Hypothesis:
(H1) The number of elements that can be inserted in the grow-only set is much larger than the number of epochs? How much?
(H2) Alg3 is more efficient than Alg2 (also Alg?-set is more efficient than Alg?-set)? Therefore Alg3-set is the most efficient.
(H3) The (silent) Byzantine servers do not affect dramatically the performance
(H4) Performance does not degrade over time

Experiment 1:
In our first experiment we tested how many epochs per minute our DPO implantation can handle. For this, in our runs we did not insert any element and we incremented epochs as quickly as possible in order to have the smallest latency between an epoch and the subsequent one. We run it with 4, 7 and 10 nodes, with and without byzantines servers.

Experiment 2:
In our second experiment we tested how many elements per minute can be added using the 4 different implementations of DPO (alg2, alg2+set, alg3, alg3+set). We inserted elements as fast as possible without performing any epoch increment.

In this case, alg2 and alg3 perform quite similarly in all sets up, but both are out performed by an order of magnitude by alg2+set and alg3+set.
None of the algorithms suffer much when the number of nodes increases.
If we compare it with the results of the previous experiment we can see that the number of elements that can be inserted is 100x the number of epochs increment when using alg2 and alg3 and with the aggregation it goes up to 1000.

Experiment 3:
The purpose of this experiment is to compare the performance of our implementations of DPO when both epochs increments and insertion of elements are combined. We repeated experiment 2 but this time we fixed the epoch increments rate to 1 per second.

Here, we can appreciate how alg3 outperforms alg2. In fact, it even outperforms alg2+set by a factor of ~5 for 4 nodes and by a factor of ~2 for 7 and 10. 
(Antonio already explained how epoch increments influtate both algs).
 But, the algorithm with the maximum throughput is alg3+set. It can handle 8x times the elements added by alg3 for 4 nodes and ~30 for 7 and 10 nodes. The benefits of alg3+set over alg3 increase as the number of nodes increase because alg3+set avoids the broadcasting of elements which generates a number of messages that is quadratic in the number of nodes in the network.

Experiment 4:
The goal of this experiment is to see how byzantine affects our implementation of DPO using  alg3+set. The byzantine behavior implemented is of silent servers, ie, where the network manager drops all messages that a silent server receives and tries to send. We run experiments for n=4,7,10 nodes with 0 and up to (n-1)/3 byzantines servers. In each of them we fixed the epoch increments rate to 1 per second and we pushed the add requests to the maximum rate.
TODO

Experiment 5:
In order to see if the performance of alg3 and alg3+set degrade over time we run an experiment for 30 minutes with 4 nodes with epoch increments rate to 5 per second and add requests to 50% of the maximum rate. For alg3+set we set a timeout of 5 seconds.
For each element, we compute the time elapsed between the moment in which the request to add it was generated and the moment it was stamped, we call it "time to stamp".
Figures exp5_alg3 and exp5_alg3+set show for each second the maximum and average "time to stamp" of all elements that were stamped in the last second.
For algorithm3 there are few maximum peaks around 5 seconds but they don't seem to increase or be more frequent over time. The average is usually below 1 second.
For algorithm3+set we can observe several peaks around 5 seconds. This occurs when elements cannot be added through epochs increments and should be broadcasted. Although these elements needed to be broadcasted once they are broadcasted they are immediately stamped. This shows the importance of having a timeout in alg3+set and not just relying in the epochs increments to add elements in the DPO.
The average has only two peaks of ~2 seconds and, in general, is way below 1 second.
